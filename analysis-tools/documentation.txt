Analysis Tools Documentation 
****************************

This directory contains a collection of tools for analyzing, formatting, and
visualizing antenna pattern measurments.


Summary of Tools
****************

AntennaQ.m
%	Matlab function for computing bounds on antenna Q and D/Q, from Matlab
%	Central File Exchange


Dirplot.m
%	Matlab function for polar directivity plots, from Matlab Central File
%	Exchange


findBeamwidth.m
%	Matlab function to find the desired beamwidth of an antenna pattern.


mmpolar.m
%	Matlab function for polar plots with settable properties, from Matlab
%	Central File Exchange


plotPoincare.m
%   Matlab function to plot orthogonal field measurments on a Poincare sphere
%	to visualize polarization.


SphToRect.m
%	Matlab function to convert from spherical to rectangular coordinates.


test_findBeamwidth.m
%	Matlab script to test functionality of findBeamwidth.m



Detailed Listing
****************

AntennaQ.m
%	Matlab function
%	AntennaQ computes physical bounds on Q and D/Q for linearly polarized antennas composed by non-magnetic materials.
%
%%% Examples: 
%	  [DQ,Q,ka,polarizability] = AntennaQ(height, width, geometry, frequency, abs_eff, fig_num)
%	  [DQ,Q,ka,polarizability] = AntennaQ(logspace(-2,2,301), 1, 'rectangle_v');
%	  [DQ,Q,ka,polarizability] = AntennaQ(logspace(-2,2,301), 1, 'rectangle_v', 1e9, 0.5, 1);
%	  [DQ,Q,ka,polarizability] = AntennaQ(1, 1, 'cylinder_v', 1e6);
%	  [DQ,Q,ka,polarizability] = AntennaQ(0.05, 0.02, 'spheroid_h', 1e9, 0.5)
%
%%% Input parameters
%	height, width : height and diameter for {cylinder_h, cylinder_v, spheroid_h, spheroid_v}
%	                   height and width for rectangles. Unit meter [m]
%	geometry: {'rec_v', 'rec_h', 'cyl_v', 'cyl_h', 'spheroid_h', 'spheroid_v', }   
%	    _h for horizontal (along the width) and _v for vertical (along the height) polarization
%	  'rec_v', 'rectangle_v' – planar rectangle, zero thickness;
%	  'cyl_h’, ‘cylinder_h’ – cylinder;
%	frequency: resonance frequency in Hz (scalar). Default frequency = c0/(2*pi), ie k=1.
%	abs_eff: generalized (all spectrum) absorption efficiency (scalar). Default abs_eff=1/2.
%	fig_num: if fig_no>0 plots the D/Q results in figure number fig_no.
%
%%% Output parameters
%	DQ: bound on D/Q (directivity/Q factor) 
%	Q: Q factor (or antenna Q, radiation Q) for the case D=3/2
%	ka: electrical size, ka = 2*pi*frequency*a/c0, where a is the radius of the smallest circumscribing sphere, ie
%	       a=sqrt(height^2+diameter^2)/2 for geo={'rec','cyl'} and a=max(height,diameter)/2 for the spheroids;  
%	polarizability: polarizability of the structure in unit meter^3 [m^3]
%
%%%
%	Copyright (C) Mats Gustafsson 2009
%	http://www.eit.lth.se/staff/mats.gustafsson
%%%
%	This function calculates physical bounds on Q and D/Q for linearly
%	polarized antennas composed by non-magnetic materials
%	and circumscribed by various geometries as described in: 
%	Gustafsson, Sohl, and Kristensson
%	Illustrations of new physical bounds on linearly polarized antennas, 
%	IEEE Trans. Antennas Propagat., Vol. 57, No. 5, pp. 1319-1327, 2009.
%	http://dx.doi.org/10.1109/TAP.2009.2016683
%	and
%	Physical limitations on antennas of arbitrary shape, 
%	Proc. Roy. Soc. A, Vol. 463, No. 2086, pp. 2589-2607, 2007. 
%	http://dx.doi.org/10.1098/rspa.2007.1893
%
%	The polarizability is based on analytic results for spheroids and approximations of integral equation (MoM) data with rational
%	functions for cylinders and rectangles.


Dirplot.m
%	Matlab function
%	hpol = dirplot(theta,rho,line_style,params)
%
%	DIRPLOT  Polar directivity plot.
%
%   A modification of The Mathworks POLAR function, DIRPLOT generates
%   directivity plots in the style commonly used in acoustic and RF work.
%   Features include:
%     1. Plots -90 to +90 or -180 to +180 degrees based on range of input
%        THETA, with 0 degrees at top center.
%     2. Produces semicircular plots when plot range is -90 to +90 degrees.
%     3. RHO is assumed to be in decibels and may include negative
%        values.
%     4. Default automatic rho-axis scaling in "scope knob" factors.
%     5. Optional PARAMS argument allows manual setting of rho-axis
%        scaling.
%   
%   DIRPLOT(THETA, RHO) makes a plot using polar coordinates of the
%   angle THETA versus the radius RHO. THETA must be in degrees, and
%   must be within the range -180 to +180 degrees. If THETA is within
%   the range -90 to +90 degrees, the plot will be semicircular. RHO is
%   assumed to be in decibels and the values may be positive or negative or
%   both. By default, with no PARAMS argument, rho-axis scaling will be determined
%   automatically using scope knob factors of 1-2-5. By default, 10
%   ticks will be plotted. Note: Like POLAR, DIRPLOT does not rescale the
%   axes when a new plot is added to a held graph.
%
%   DIRPLOT(THETA, RHO, LINE_STYLE, PARAMS) makes a plot as described above
%   using the linestyle specified in string LINE_STYLE, and using the rho-axis
%   scaling specified in vector PARAMS. Either of these optional arguments may be
%   used alone. Vector PARAMS is a 3-element row vector defined as
%   [RHOMAX RHOMIN RHOTICKS]. String LINE_STYLE is the standard MATLAB linestyle
%   string. See PLOT for a description.
%
%   HPOL = DIRPLOT(...) returns a handle to the LINE object generated by the PLOT
%   function that actually generates the plot in DIRPLOT.
% 
%   See also POLAR, PLOT, LOGLOG, SEMILOGX, SEMILOGY.
% 
%   Rev 1.0, 17 January 2002
%   Tested in MATLAB v. 6.0
%
%   Adapted from The MathWorks POLAR function by
%   Steve Rickman
%   sxrickman@gmail.com


findBeamwidth.m
%	Matlab function
%	[beamwidth, topIndex, botIndex, maxIndex]
%			= findBeamwidth(beamwidthDepth_dB, data_dB, averagingWindowSize)
%
%	Determine beamwidth of an antenna pattern.
%
%   beamwidth = Width of beam, in number of indicies between the two bounds
%
%   topIndex = Index into data_dB of location of right-hand (larger angle)
%       bound of the beam
%
%   botIndex = Index into data_dB of location of left-hand (smaller angle)
%       bound of the beam
%
%   maxIndex = Index into data_dB of location of pattern maximum
%
%   beamwidthDepth_dB = Decrease between pattern max and bounds of
%       beam, e.g. set this to +3 for the half-power (-3dB) beamwidth if
%       data_dB is a power pattern.
%
%   data_dB = Antenna pattern data in dB. Note that whether this is a power
%       or field pattern will influence what value you want to use with
%       beamwidthDepth_dB. Data points are assumed to be given in strictly 
%       increasing or strictly decreasing order by angle.
%   
%   averagingWindowSize = Size, in data points, of moving average used to
%       smooth data before comparison to cutoff. If the average exceeds the
%       cutoff value, the beam edge is taken as the central point in the
%       window, rounded down (for both edges, thus neither shrinking nor
%       widening the beam, just potentially shifting it slightly). If not
%       specified, this value defaults to 4 data points.


mmpolar.m
%	Matlab function
%
%	Polar Plot with Settable Properties.
%
%	MMPOLAR(Theta,Rho) creates a polar coordinate plot using the angle Theta
%	in RADIANS and radius in Rho. Rho can contain negative values.
%	MMPOLAR(Theta,Rho,S) creates the plot using the line spec given by S. See
%	the function PLOT for information about S.
%	MMPOLAR(Theta1,Rho1,S1,Theta2,Rho2,S2,...) plots all the defined curves.
%
%	MMPOLAR(Theta1,Rho1,S1,...,'PName',PValue,...) plots all defined curves,
%	and sets plot property names to the corresponding property values.
%	MMPOLAR(Theta1,Rho1,S1,...,P) plots all the defined curves, and uses the
%	structure P having fieldnames equal to plot property names to set
%	corresponding property values contained in the associated fields.
%
%	H=MMPOLAR(Theta,Rho,...) returns handles to lines or lineseries objects.
%	For example, set(H,'LineWidth',2) sets all linewidths to 2 points.
%	Note: 'LineWidth' is NOT a property that can be set with MMPOLAR. It must
%	be set as shown above by using the SET function on the line handles H.
%
%	MMPOLAR('PName',PValue,...) sets the property names to the corresponding
%	property values. See below for property name/value pairs. Just as with
%	the function SET 'PName' is case insensitive and need only be unique.
%	MMPOLAR with no input argument returns a structure with fieldnames equal
%	to property names each containing the associated property values.
%	MMPOLAR(P) sets property values using the structure P as described above.
%	MMPOLAR('PName') returns the property value associated with 'PName'.
%	MMPOLAR({'PName1','PName2',...}) returns multiple property values in a
%	cell array.
%	MMPOLAR(Hax,...) uses the axes having handle Hax.
%
%	Examples: MMPOLAR(Theta,Rho,S,'Style','compass') creates a polar plot with
%	theta=0 pointing North and theta increasing in the clockwise direction.
%
%	MMPOLAR(Theta,Rho,S) creates a cartesian polar plot where theta=0 is along
%	the x-axis and theta increases in the counterclockwise direction.
%
%	MMPOLAR works with HOLD, XLABEL, YLABEL, TITLE, ZOOM, SUBPLOT
%	but does not work with AXIS, GRID (Use MMPOLAR properties to set these)
%
%	See also POLAR, PLOT, HOLD
%
%	PROPERTY          VALUE {Default}  DESCRIPTION
%	Style             {cartesian} | compass  shortcut to two common polar
%	                    styles. Cartesian: theta=0 points east and increases
%	                    going north. Compass: theta=0 points north and
%	                    increases going east. See TDirection and TZeroDirection.
%	Axis              {on} | off  shortcut for grids, ticks, border,
%	                    backgroundcolor, visibility
%	Border            {on} | off  shortcut for axis border, tick mark visibility.
%	Grid              {on} | off  shortcut for visibility of rho and theta grids
%	RLimit            [Rmin Rmax] rho axis limits, may be negative values
%	TLimit            [Tmin Tmax] theta axis limits in RADIANS
%	RTickUnits        {''} string added to last rho tick label to denote units
%	TTickScale        {degrees} | radians  theta axis tick label scaling
%	TDirection        cw | {ccw} direction of increasing theta
%	TZeroDirection    North | {East} | South | West  theta=0 axis direction
%
%	BackgroundColor   {w}  colorspec for axis background color
%	BorderColor       {k} colorspec for axis border and tick mark colors
%	FontName          string  font name for tick labels
%	FontSize          scalar  font size for tick labels
%	FontWeight        {normal} | bold  font weight for tick labels
%	TickLength        {.02} normalized length of rho and theta axis tick marks
%
%	RGridColor        {k} colorspec for rho axis grid color
%	RGridLineStyle    - | -- | {:} | -.  rho axis grid line style
%	RGridLineWidth    {0.5}  rho axis grid line width in points
%	RGridVisible      {on} | off  rho axis grid visibility
%	RTickAngle        [scalar]  angular position of rho axis tick labels in
%	                            TTickScale units
%	RTickOffset       {.04} Normalized radial offset for rho tick labels
%	RTickLabel        string cell array containing rho axis tick labels
%	RTickLabelVisible {on} | off  visibility of rho axis tick labels
%	RTickLabelHalign  {center} | left | right  horizontal
%	                            alignment of rho axis tick labels
%	RTickLabelValign  {middle} | top | cap | baseline | bottom  vertical
%	                            alignment of rho axis tick labels
%	RTickValue        [vector]  vector containing rho axis tick positions
%	RTickVisible      {on} | off  rho axis tick visibility
%
%	TGridColor        colorspec for theta axis grid color
%	TGridLineStyle    - | -- | {:} | -.  theta axis grid line style
%	TGridLineWidth    {0.5}  theta axis grid line width in points
%	TGridVisible      {on} | off  theta axis grid visibility
%	TTickDelta        theta axis tick spacing in TTickScale units
%	                  {15 degrees or pi/12 radians}
%	TTickDirection    {in} | out  direction of theta tick marks
%	TTickOffset       {.08} normalized radial offset of theta tick labels
%	TTickLabel        string cell array containing theta axis tick labels
%	TTickLabelVisible {on} | off  visiblity of theta axis tick labels
%	TTickSign         {+-} | + sign of theta tick labels
%	TTickValue        [vector]  vector of theta ticks in TTickScale units
%	TTickVisible      {on} | off  theta axis tick visibility
%
%	D.C. Hanselman, University of Maine, Orono, ME 04469
%	MasteringMatlab@yahoo.com
%	Mastering MATLAB 7
%	2005-04-25, 2006-01-18, 2006-04-06, 2006-05-17, 2006-05-18
%	2006-10-03, 2007-03-04, 2008-03-18


plotPoincare.m
%   Matlab function
%   plotPoincare(MagX, MagY, DeltaPhase, OpaqueSphere, ShowLabels)
%   
%   Plots a point or vector of points on a Poincare sphere for
%   easy visualization of the points' polarization.
%   
%   X and Y must be two perpendicular measurements of the field, with MagX
%   and MagY being the fields' magnitudes and DeltaPhase being the
%   difference in their phases in degrees (PhaseY - PhaseX).
%
%   OpaqueSphere is an optional argument which determines if the sphere is
%   opaque (points on the back are hidden) or transparent (see-through wire
%   frame) If not specified, it defaults to false (transparent).
%   
%   ShowLabels is an optional argument which sets whether or not to include
%   text labels on the sphere denoting six special case polarizations:
%   left- and right-handed circular; vertical, horizontal, and +/-45
%   degree (slant) linear. If not specified, it defaults to true.


SphToRect.m
%	Matlab function
%	[x, y, z] = SphToRect(r, theta, phi)
%	
%	Convert spherical coordinates (r, theta, phi) into rectangular (x, y, z)
%
%   r = radius from origin
%
%   theta = angle in radians from +z axis
%
%   phi = angle in radians from +x axis, in the XY plane
%
%   This function was written for easier conversion from spherical to
%   rectangular coordinates, since Matlab's built-in function sph2cart
%   uses an elevation angle instead of a zenith angle. Although this can be
%   handled with a simple conversion, i.e.
%       [x, y, z] = sph2cart(theta, (pi/2) - phi, r);
%   this function can allow for somewhat cleaner code (shorter arguments,
%   and in the order typically used for spherical coordinates).


test_findBeamwidth.m
%	Matlab script
%	
%	Generates a sample pattern (sin(phi/2))^2 for phi in [0,359], adds noise,
%	and plots the clean and noisy pattern in decibels. The beamwidth is
%	calculated and drawn on the noisy data graph. This is then repeated for the
%	same pattern rotated 120 degrees (with a fresh set of noise added to the
%	clean data).

